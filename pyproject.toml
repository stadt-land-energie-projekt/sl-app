# ==== pytest ====
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--ds=config.settings.test --reuse-db"
python_files = [
    "tests.py",
    "test_*.py",
]

# ==== Coverage ====
[tool.coverage.run]
include = ["slapp/**"]
omit = ["*/migrations/*", "*/tests/*"]
plugins = ["django_coverage_plugin"]


# ==== black ====
[tool.black]
line-length = 119
target-version = ['py311']


# ==== isort ====
[tool.isort]
profile = "black"
line_length = 119
known_first_party = [
    "slapp",
    "config",
]
skip = ["venv/"]
skip_glob = ["**/migrations/*.py"]


# ==== mypy ====
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = [
    "mypy_django_plugin.main",
    "mypy_drf_plugin.main",
]

[[tool.mypy.overrides]]
# Django migrations should not produce any errors:
module = "*.migrations.*"
ignore_errors = true

[tool.django-stubs]
django_settings_module = "config.settings.test"


# ==== PyLint ====
[tool.pylint.MASTER]
load-plugins = [
    "pylint_django",
    "pylint_celery",
]
django-settings-module = "config.settings.local"

[tool.pylint.FORMAT]
max-line-length = 119

[tool.pylint."MESSAGES CONTROL"]
disable = [
    "missing-docstring",
    "invalid-name",
]

[tool.pylint.DESIGN]
max-parents = 13

[tool.pylint.TYPECHECK]
generated-members = [
    "REQUEST",
    "acl_users",
    "aq_parent",
    "[a-zA-Z]+_set{1,2}",
    "save",
    "delete",
]


# ==== djLint ====
[tool.djlint]
blank_line_after_tag = "load,extends"
close_void_tags = true
format_css = true
format_js = true
# TODO: remove T002 when fixed https://github.com/Riverside-Healthcare/djLint/issues/687
ignore = "H006,H030,H031,T002"
include = "H017,H035"
indent = 2
max_line_length = 119
profile = "django"

[tool.djlint.css]
indent_size = 2

[tool.djlint.js]
indent_size = 2


# ==== ruff ====
[tool.ruff]
line-length = 120
lint.select = ["ALL"]
exclude = [
  "manage.py",
  "slapp/utils/ogr_layer_mapping.py",
  "config/wsgi.py",
  "slapp/contrib/*",
  "slapp/users/*",
  "merge_local_dotenvs_in_dotenv.py",
  "slapp/utils/context_processors.py",
  "slapp/explorer/charts.py",
  "slapp/explorer/chart_data.py"
]
lint.ignore = [
  "I001",    # Import block is un-sorted or un-formatted (done by isort)
  "D203",    # 1 blank line required before class docstring
  "D212",    # Multi-line docstring summary should start at the first line pydocstyle
  "ANN101",  # Missing type annotation for `self` in method
  "ANN102",  # Missing type annotation for `cls` in classmethod
  "ANN003",  # Missing type annotation for `**kwargs`
  "EM102",   # Exception must not use an f-string literal, assign to variable first
  "TRY003",  # Avoid specifying long messages outside the exception class
  "S101",    # Use of `assert` detected
  "UP007",   # Use `X | Y` for type annotations
  "B905",    # `zip()` without an explicit `strict=` parameter
  "FIX001",  # Line contains FIXME
  "FIX002",  # Line contains TODO
  "RET504",  # Unnecessary variable assignment before `return` statement
  "G004",    # Logging statement uses f-string
  "PD011",   # Use `.to_numpy()` instead of `.values`  (does not work out of the box)
  "RUF012",  # Mutable class attributes should be annotated with `typing.ClassVar`
  "UP038",   # (non-pep604-isinstance)
]
fix = true
show-fixes = true
lint.unfixable = ["UP007", "I001"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
  "PLR2004", # Magic value used in comparison
  "ANN201",  # Missing return type annotation for public function
]
"*/__init__.py" = [
  "D104",  # Missing docstring in public package
]
"scripts/*" = [
  "INP001",  # File is part of an implicit namespace package. Add an `__init__.py`.
]
