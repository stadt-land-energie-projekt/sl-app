# Generated by Django 4.2.6 on 2023-11-21 09:40

from django.contrib.postgres.operations import CreateExtension
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AirTraffic",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Aviation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BiosphereReserve",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DrinkingWaterArea",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FaunaFloraHabitat",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Floodplain",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Forest",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Grid",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Industry",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LandscapeProtectionArea",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LessFavouredAreasAgricultural",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Military",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Municipality",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                ("name", models.CharField(max_length=50, unique=True)),
                ("area", models.FloatField()),
            ],
            options={
                "verbose_name": "Municipality",
                "verbose_name_plural": "Municipalities",
            },
        ),
        migrations.CreateModel(
            name="NatureConservationArea",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PotentialareaPVAgricultureLFAOff",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PotentialareaPVRoadRailway",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PotentialareaWindSTP2018Vreg",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PotentialareaWindSTP2027Repowering",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PotentialareaWindSTP2027SearchAreaForestArea",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PotentialareaWindSTP2027SearchAreaOpenArea",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PotentialareaWindSTP2027VR",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Railway",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Region",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "layer_type",
                    models.CharField(
                        choices=[
                            ("country", "Country"),
                            ("state", "State"),
                            ("district", "District"),
                            ("municipality", "Municipality"),
                        ],
                        max_length=12,
                    ),
                ),
            ],
            options={
                "verbose_name": "Region",
                "verbose_name_plural": "Regions",
            },
        ),
        migrations.CreateModel(
            name="Road",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="RoadRailway500m",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Settlement0m",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SoilQualityHigh",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SoilQualityLow",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="SpecialProtectionArea",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Water",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="WindTurbine",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("name", models.CharField(max_length=255, null=True)),
                ("geometry_approximated", models.BooleanField()),
                ("unit_count", models.BigIntegerField(null=True)),
                ("capacity_net", models.FloatField(null=True)),
                ("zip_code", models.CharField(max_length=50, null=True)),
                ("status", models.CharField(max_length=50, null=True)),
                ("city", models.CharField(max_length=50, null=True)),
                ("commissioning_date", models.CharField(max_length=50, null=True)),
                ("commissioning_date_planned", models.CharField(max_length=50, null=True)),
                ("decommissioning_date", models.CharField(max_length=50, null=True)),
                ("capacity_gross", models.FloatField(null=True)),
                ("voltage_level", models.CharField(max_length=50, null=True)),
                ("mastr_id", models.CharField(max_length=50, null=True)),
                ("name_park", models.CharField(max_length=255, null=True)),
                ("hub_height", models.FloatField(null=True)),
                ("rotor_diameter", models.FloatField(null=True)),
                ("site_type", models.CharField(max_length=255, null=True)),
                ("manufacturer_name", models.CharField(max_length=255, null=True)),
                ("type_name", models.CharField(max_length=255, null=True)),
                ("constraint_deactivation_sound_emission", models.CharField(max_length=50, null=True)),
                ("constraint_deactivation_sound_emission_night", models.CharField(max_length=50, null=True)),
                ("constraint_deactivation_sound_emission_day", models.CharField(max_length=50, null=True)),
                ("constraint_deactivation_shadowing", models.CharField(max_length=50, null=True)),
                ("constraint_deactivation_animals", models.CharField(max_length=50, null=True)),
                ("constraint_deactivation_ice", models.CharField(max_length=50, null=True)),
                ("citizens_unit", models.CharField(max_length=50, null=True)),
                (
                    "mun_id",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="explorer.municipality"
                    ),
                ),
            ],
            options={
                "verbose_name": "Wind turbine",
                "verbose_name_plural": "Wind turbines",
            },
        ),
        migrations.CreateModel(
            name="Storage",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("name", models.CharField(max_length=255, null=True)),
                ("geometry_approximated", models.BooleanField()),
                ("unit_count", models.BigIntegerField(null=True)),
                ("capacity_net", models.FloatField(null=True)),
                ("zip_code", models.CharField(max_length=50, null=True)),
                ("status", models.CharField(max_length=50, null=True)),
                ("city", models.CharField(max_length=50, null=True)),
                ("commissioning_date", models.CharField(max_length=50, null=True)),
                ("commissioning_date_planned", models.CharField(max_length=50, null=True)),
                ("decommissioning_date", models.CharField(max_length=50, null=True)),
                ("capacity_gross", models.FloatField(null=True)),
                ("voltage_level", models.CharField(max_length=50, null=True)),
                ("mastr_id", models.CharField(max_length=50, null=True)),
                (
                    "mun_id",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="explorer.municipality"
                    ),
                ),
            ],
            options={
                "verbose_name": "Battery storage",
                "verbose_name_plural": "Battery storages",
            },
        ),
        migrations.CreateModel(
            name="PVroof",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("name", models.CharField(max_length=255, null=True)),
                ("geometry_approximated", models.BooleanField()),
                ("unit_count", models.BigIntegerField(null=True)),
                ("capacity_net", models.FloatField(null=True)),
                ("zip_code", models.CharField(max_length=50, null=True)),
                ("status", models.CharField(max_length=50, null=True)),
                ("city", models.CharField(max_length=50, null=True)),
                ("commissioning_date", models.CharField(max_length=50, null=True)),
                ("commissioning_date_planned", models.CharField(max_length=50, null=True)),
                ("decommissioning_date", models.CharField(max_length=50, null=True)),
                ("capacity_gross", models.FloatField(null=True)),
                ("voltage_level", models.CharField(max_length=50, null=True)),
                ("mastr_id", models.CharField(max_length=50, null=True)),
                ("power_limitation", models.CharField(max_length=50, null=True)),
                ("site_type", models.CharField(max_length=255, null=True)),
                ("feedin_type", models.CharField(max_length=255, null=True)),
                ("module_count", models.FloatField(null=True)),
                ("usage_sector", models.CharField(max_length=50, null=True)),
                ("orientation_primary", models.CharField(max_length=50, null=True)),
                ("orientation_secondary", models.CharField(max_length=50, null=True)),
                ("area_type", models.FloatField(null=True)),
                ("area_occupied", models.FloatField(null=True)),
                ("citizens_unit", models.CharField(max_length=50, null=True)),
                ("landlord_to_tenant_electricity", models.CharField(max_length=50, null=True)),
                (
                    "mun_id",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="explorer.municipality"
                    ),
                ),
            ],
            options={
                "verbose_name": "Roof-mounted PV",
                "verbose_name_plural": "Roof-mounted PVs",
            },
        ),
        migrations.CreateModel(
            name="PVground",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("name", models.CharField(max_length=255, null=True)),
                ("geometry_approximated", models.BooleanField()),
                ("unit_count", models.BigIntegerField(null=True)),
                ("capacity_net", models.FloatField(null=True)),
                ("zip_code", models.CharField(max_length=50, null=True)),
                ("status", models.CharField(max_length=50, null=True)),
                ("city", models.CharField(max_length=50, null=True)),
                ("commissioning_date", models.CharField(max_length=50, null=True)),
                ("commissioning_date_planned", models.CharField(max_length=50, null=True)),
                ("decommissioning_date", models.CharField(max_length=50, null=True)),
                ("capacity_gross", models.FloatField(null=True)),
                ("voltage_level", models.CharField(max_length=50, null=True)),
                ("mastr_id", models.CharField(max_length=50, null=True)),
                ("power_limitation", models.CharField(max_length=50, null=True)),
                ("site_type", models.CharField(max_length=255, null=True)),
                ("feedin_type", models.CharField(max_length=255, null=True)),
                ("module_count", models.FloatField(null=True)),
                ("usage_sector", models.CharField(max_length=50, null=True)),
                ("orientation_primary", models.CharField(max_length=50, null=True)),
                ("orientation_secondary", models.CharField(max_length=50, null=True)),
                ("area_type", models.FloatField(null=True)),
                ("area_occupied", models.FloatField(null=True)),
                ("citizens_unit", models.CharField(max_length=50, null=True)),
                ("landlord_to_tenant_electricity", models.CharField(max_length=50, null=True)),
                (
                    "mun_id",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="explorer.municipality"
                    ),
                ),
            ],
            options={
                "verbose_name": "Ground-mounted PV",
                "verbose_name_plural": "Ground-mounted PV",
            },
        ),
        migrations.AddField(
            model_name="municipality",
            name="region",
            field=models.OneToOneField(
                null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="explorer.region"
            ),
        ),
        migrations.CreateModel(
            name="Hydro",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("name", models.CharField(max_length=255, null=True)),
                ("geometry_approximated", models.BooleanField()),
                ("unit_count", models.BigIntegerField(null=True)),
                ("capacity_net", models.FloatField(null=True)),
                ("zip_code", models.CharField(max_length=50, null=True)),
                ("status", models.CharField(max_length=50, null=True)),
                ("city", models.CharField(max_length=50, null=True)),
                ("commissioning_date", models.CharField(max_length=50, null=True)),
                ("commissioning_date_planned", models.CharField(max_length=50, null=True)),
                ("decommissioning_date", models.CharField(max_length=50, null=True)),
                ("capacity_gross", models.FloatField(null=True)),
                ("voltage_level", models.CharField(max_length=50, null=True)),
                ("mastr_id", models.CharField(max_length=50, null=True)),
                ("water_origin", models.CharField(max_length=255, null=True)),
                ("kwk_mastr_id", models.FloatField(null=True)),
                ("plant_type", models.CharField(max_length=255, null=True)),
                ("feedin_type", models.CharField(max_length=255, null=True)),
                (
                    "mun_id",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="explorer.municipality"
                    ),
                ),
            ],
            options={
                "verbose_name": "Hydro",
                "verbose_name_plural": "Hydro",
            },
        ),
        migrations.CreateModel(
            name="GSGK",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("name", models.CharField(max_length=255, null=True)),
                ("geometry_approximated", models.BooleanField()),
                ("unit_count", models.BigIntegerField(null=True)),
                ("capacity_net", models.FloatField(null=True)),
                ("zip_code", models.CharField(max_length=50, null=True)),
                ("status", models.CharField(max_length=50, null=True)),
                ("city", models.CharField(max_length=50, null=True)),
                ("commissioning_date", models.CharField(max_length=50, null=True)),
                ("commissioning_date_planned", models.CharField(max_length=50, null=True)),
                ("decommissioning_date", models.CharField(max_length=50, null=True)),
                ("capacity_gross", models.FloatField(null=True)),
                ("voltage_level", models.CharField(max_length=50, null=True)),
                ("mastr_id", models.CharField(max_length=50, null=True)),
                ("feedin_type", models.CharField(max_length=50, null=True)),
                ("kwk_mastr_id", models.CharField(max_length=50, null=True)),
                ("th_capacity", models.FloatField(null=True)),
                ("unit_type", models.CharField(max_length=255, null=True)),
                ("technology", models.CharField(max_length=255, null=True)),
                (
                    "mun_id",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="explorer.municipality"
                    ),
                ),
            ],
            options={
                "verbose_name": "GSGK",
                "verbose_name_plural": "GSGK",
            },
        ),
        migrations.CreateModel(
            name="Combustion",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("name", models.CharField(max_length=255, null=True)),
                ("geometry_approximated", models.BooleanField()),
                ("unit_count", models.BigIntegerField(null=True)),
                ("capacity_net", models.FloatField(null=True)),
                ("zip_code", models.CharField(max_length=50, null=True)),
                ("status", models.CharField(max_length=50, null=True)),
                ("city", models.CharField(max_length=50, null=True)),
                ("commissioning_date", models.CharField(max_length=50, null=True)),
                ("commissioning_date_planned", models.CharField(max_length=50, null=True)),
                ("decommissioning_date", models.CharField(max_length=50, null=True)),
                ("capacity_gross", models.FloatField(null=True)),
                ("voltage_level", models.CharField(max_length=50, null=True)),
                ("mastr_id", models.CharField(max_length=50, null=True)),
                ("name_block", models.CharField(max_length=255, null=True)),
                ("kwk_mastr_id", models.CharField(max_length=50, null=True)),
                ("bnetza_id", models.CharField(max_length=50, null=True)),
                ("usage_sector", models.CharField(max_length=50, null=True)),
                ("th_capacity", models.FloatField(null=True)),
                ("feedin_type", models.CharField(max_length=255, null=True)),
                ("technology", models.CharField(max_length=255, null=True)),
                ("fuel_other", models.CharField(max_length=255, null=True)),
                ("fuels", models.CharField(max_length=255, null=True)),
                (
                    "mun_id",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="explorer.municipality"
                    ),
                ),
            ],
            options={
                "verbose_name": "Combustion",
                "verbose_name_plural": "Combustion",
            },
        ),
        migrations.CreateModel(
            name="Biomass",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("geom", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("name", models.CharField(max_length=255, null=True)),
                ("geometry_approximated", models.BooleanField()),
                ("unit_count", models.BigIntegerField(null=True)),
                ("capacity_net", models.FloatField(null=True)),
                ("zip_code", models.CharField(max_length=50, null=True)),
                ("status", models.CharField(max_length=50, null=True)),
                ("city", models.CharField(max_length=50, null=True)),
                ("commissioning_date", models.CharField(max_length=50, null=True)),
                ("commissioning_date_planned", models.CharField(max_length=50, null=True)),
                ("decommissioning_date", models.CharField(max_length=50, null=True)),
                ("capacity_gross", models.FloatField(null=True)),
                ("voltage_level", models.CharField(max_length=50, null=True)),
                ("mastr_id", models.CharField(max_length=50, null=True)),
                ("fuel_type", models.CharField(max_length=50, null=True)),
                ("kwk_mastr_id", models.CharField(max_length=50, null=True)),
                ("th_capacity", models.FloatField(null=True)),
                ("feedin_type", models.CharField(max_length=50, null=True)),
                ("technology", models.CharField(max_length=255, null=True)),
                ("fuel", models.CharField(max_length=255, null=True)),
                ("biomass_only", models.CharField(max_length=50, null=True)),
                ("flexibility_bonus", models.CharField(max_length=50, null=True)),
                (
                    "mun_id",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.DO_NOTHING, to="explorer.municipality"
                    ),
                ),
            ],
            options={
                "verbose_name": "Biomass",
                "verbose_name_plural": "Biomass",
            },
        ),
    ]
